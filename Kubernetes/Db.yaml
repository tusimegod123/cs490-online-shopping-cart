  # Define a 'Service' To Expose MySQL to Other Services
  apiVersion: v1
  kind: Service
  metadata:
    name: ecommercedb
    labels:
      app: ecommercedb
      tier: database
  spec:
    ports:
      - port: 3309
        targetPort: 3309
    selector:
      app: ecommercedb
      tier: database
    clusterIP: None # DNS is used, so clusterIP is not needed

---
  # Define a 'Persistent Volume Claim'(PVC) for MySQL Storage, dynamically provisioned by cluster
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ecommercedb-pv-claim # name of PVC essential for identifying the storage data
    labels:
      app: ecommercedb
      tier: database
  spec:
    accessModes:
      - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
    resources:
      requests:
        storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.

---
# Deployment specification begins here
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommercedb
  labels:
    app: ecommercedb
    tier: database
spec:
  selector: # mySQL Pod Should contain same labels
    matchLabels:
      app: ecommercedb
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels: # Must match 'Service' and 'Deployment' selectors
        app: ecommercedb
        tier: database
    spec:
      containers:
        - name: ecommercedb
          image: mysql
          imagePullPolicy: "IfNotPresent"
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: ecommerce
          ports:
            - containerPort: 3309
              name: ecommercedb
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: ecommercedb-persistence-storage
      volumes:
        - name: ecommercedb-persistence-storage
          persistentVolumeClaim:
            claimName: ecommercedb-pv-claim